// routes/orderRoutes.js
import express from 'express';
import authMiddleware from '../middleware/authMiddleware.js';
import Order from '../models/schemas/orderSchema.js';
// You'll also need to import User model if you check tailor validity etc.

const router = express.Router();

// @route   POST /api/orders
// @desc    Create a new order (customer places an order)
// @access  Private (Customer)
router.post('/', authMiddleware, async (req, res) => {
    try {
        const {
            tailorId, // ID of the tailor User
            tailorName,
            items, // Array of { serviceId, serviceName, quantity, pricePerItem }
            totalAmount,
            shippingAddress,
            notesToTailor,
            // paymentDetails, // You'd handle payment integration separately
        } = req.body;

        // Basic validation
        if (!tailorId || !items || items.length === 0 || !totalAmount) {
            return res.status(400).json({ message: 'Missing required order details.' });
        }

        const newOrder = new Order({
            customer: req.user.userId,
            tailor: tailorId,
            tailorName, // Denormalized for display
            items,
            totalAmount,
            shippingAddress,
            notesToTailor,
            status: 'Pending Confirmation', // Initial status
            // orderIdString will be auto-generated by pre-save hook
        });

        const savedOrder = await newOrder.save();
        // TODO: Notify tailor about the new order

        res.status(201).json(savedOrder);
    } catch (error) {
        console.error("Error creating order:", error);
        res.status(500).json({ message: 'Server Error creating order.' });
    }
});


// @route   GET /api/orders/my-orders
// @desc    Get all orders for the logged-in customer
// @access  Private (Customer)
router.get('/my-orders', authMiddleware, async (req, res) => {
    try {
        const orders = await Order.find({ customer: req.user.userId }).sort({ orderDate: -1 });
        res.json(orders);
    } catch (error) {
        console.error("Error fetching customer orders:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// @route   GET /api/orders/:orderId
// @desc    Get a specific order by its MongoDB ID (for customer or involved tailor)
// @access  Private
router.get('/:id', authMiddleware, async (req, res) => {
    try {
        const order = await Order.findById(req.params.id);
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }
        // Authorization: Ensure user is the customer or the tailor for this order
        if (order.customer.toString() !== req.user.userId && order.tailor.toString() !== req.user.userId) {
            return res.status(403).json({ message: 'Not authorized to view this order' });
        }
        res.json(order);
    } catch (error) {
        console.error("Error fetching order details:", error);
        if (error.kind === 'ObjectId') {
            return res.status(400).json({ message: 'Invalid Order ID format.' });
        }
        res.status(500).json({ message: 'Server Error' });
    }
});

router.get('/my-orders/latest/:count', authMiddleware, async (req, res) => {
    try {
        const count = parseInt(req.params.count) || 2; // Default to 2
        const orders = await Order.find({ customer: req.user.userId })
            .sort({ orderDate: -1 })
            .limit(count)
            .select('orderIdString items status orderDate totalAmount'); // Select only needed fields

        const activeOrdersCount = await Order.countDocuments({
            customer: req.user.userId,
            status: { $in: ['Pending Confirmation', 'In Progress', 'Shipped', 'Awaiting Payment'] }
        });

        res.json({ latestOrders: orders, activeOrdersCount });
    } catch (error) {
        console.error("Error fetching customer orders summary:", error);
        res.status(500).json({ message: 'Server Error' });
    }
});

// TODO: Add more routes for tailor to update order status, customer to cancel (if allowed), etc.

export default router;